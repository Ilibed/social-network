var webApp = angular.module('socialNetworkApp', ["ngRoute", "ngAudio", "ngCookies", "pascalprecht.translate", "ngFileUpload"]);
webApp.config(function ($routeProvider, $translateProvider) {
    $routeProvider.when('/user/:id',
        {
            templateUrl: 'views/components/home/home.html',
            controller: 'homeController'
        });
    $routeProvider.when('/login',
        {
            templateUrl: 'views/components/login/login.html',
            controller: 'loginController'
        });
    $routeProvider.when('/registry',
        {
            templateUrl: 'views/components/registry/registry.html',
            controller: 'registryController'
        });
    $routeProvider.when('/music',
        {
            templateUrl: 'views/components/music/music.html',
            controller: 'musicController'
        }
    );
    $routeProvider.when('/messages',
        {
            templateUrl: 'views/components/message/mainMessage.html',
            controller: 'mainMessageController'
        }
    );
    $routeProvider.when('/messages/:id',
        {
            templateUrl: 'views/components/message/detailedMessage.html',
            controller: 'detailedMessageController'
        }
    );
    $routeProvider.when('/friends',
        {
            templateUrl: 'views/components/friends/friends.html',
            controller: 'friendsController'
        }
    );

    $routeProvider.otherwise({redirectTo: '/login'});

    $translateProvider.useCookieStorage();
    $translateProvider.useStaticFilesLoader({
        prefix: 'assets/i18n/',
        suffix: '.json'
    });
    $translateProvider.preferredLanguage('en');
}).run(function($rootScope, $location, loginService) {
    $rootScope.loggedInUser = false;

    var userPromiseObj = loginService.getUser();
    userPromiseObj.then(function (value) {
            $rootScope.userInfo = value;
            $rootScope.loggedInUser = true;
        },
        function (value) {
            //something wrong server problem
        });


    $rootScope.$on("$routeChangeStart", function(event, next, current) {
        if ($rootScope.loggedInUser === false) {
            if (!((next.templateUrl == "views/components/registry/registry.html")
                || (next.templateUrl == "views/components/login/login.html")
                || (next.templateUrl == "views/components/music/music.html"))) {
                $location.path("/login");
            }
        }
        else {
            if (next.templateUrl == "views/components/login/login.html") {
                $location.path("/");
            }
        }
    });
});
webApp.controller('friendsController', ['$scope', '$rootScope', 'friendService', 'messageService', function($scope, $rootScope, friendService, messageService){
    $scope.friends = [];
    $scope.peoples = [];
    $scope.user = {};
    $scope.message = {
        'subject' : '',
        'senderId' : $rootScope.userInfo.id,
        'receiverId' : {},
        'sendDate' : ''
    };
    messageService.initSocket();
    if ($rootScope.messageList == null){
        messageService.setMessageCallbacks(function (newMessage) {

            },
            function (newMessage) {

            });
    }

    var promiseObj=friendService.getFriends();
    promiseObj.then(function(value) {
            $scope.friends = value;
        },
        function (value) {
            //can be logging
            console.dir(value);
        }
    );

    var promisedObj=friendService.getAllPeoples();
    promisedObj.then(function(value) {
            $scope.peoples = value;
        },
        function (value) {
            //can be logging
            console.dir(value);
        }
    );

    $scope.addToFriend = function (user) {
        var index = $scope.peoples.indexOf(user);
        var promiseObj=friendService.addToFriend(user.id);
        promiseObj.then(function(value) {
            console.dir(value);
                $scope.friends.push(value);
                $scope.peoples.splice(index, 1);
            },
            function (value) {
                //can be logging
                console.dir(value);
            }
        );
    };

    $scope.removeFriend = function (user) {
        var index = $scope.friends.indexOf(user);
        var promiseObj=friendService.removeFromFriend(user.id);
        promiseObj.then(function(value) {
                $scope.friends.splice(index, 1);
                $scope.peoples.push(user)
            },
            function (value) {
                //can be logging
                console.dir(value);
            }
        );
    };

    $scope.showNewMessage = function (user) {
        $scope.user = user;
        commonModule.showMessageModal();
    };

    $scope.sendMessage = function () {
        var date = new Date();
        var month = date.getMonth() + 1;
        $scope.message.sendDate = date.getFullYear() + "-" + month + "-" + date.getDate() + " " +
            date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
        console.dir($scope.message);
        messageService.send($scope.message);
        $scope.message.subject = '';
    }
}]);
/**
 * Created by gs on 25.05.2017.
 */
webApp.filter('friendSearch', function() {
    return function(input, search) {
        if (!input) return input;
        if (!search) return input;
        var expected = ('' + search).toLowerCase();
        var result = {};
        angular.forEach(input, function(value, key) {
            var actual = ('' + value.fullName).toLowerCase();
            if (actual.indexOf(expected) !== -1) {
                result[key] = value;
            }
        });
        return result;
    }
});
/**
 * Created by gs on 24.05.2017.
 */
webApp.factory('friendService',['$http', '$q', function ($http, $q) {
    return{
        getFriends: function () {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                url: '/api/get/friends'
            }).then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        },
        getAllPeoples: function () {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                url: '/api/get/users'
            }).then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        },
        addToFriend: function (userId) {
            var deferred = $q.defer();
            $http({
                method: 'POST',
                url: '/api/friend/add/' + userId,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).
            then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        },
        removeFromFriend: function (userId) {
            var deferred = $q.defer();
            $http({
                method: 'POST',
                url: '/api/friend/remove/' + userId,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).
            then(function(response) {
                    deferred.resolve(response.headers);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        }
    }
}]);
webApp.controller("homeController", ['$scope', '$routeParams', '$rootScope', 'userService', 'postService', 'imageUploadService', 'messageService', function($scope, $routeParams, $rootScope, userService, postService, imageUploadService, messageService){
    $scope.file = {};
    $scope.avatarFile = {};
    $scope.text = "";
    $scope.posts = [];
    $scope.message = {
        'subject' : '',
        'senderId' : $rootScope.userInfo.id,
        'receiverId' : {},
        'sendDate' : ''
    };
    messageService.initSocket();
    if ($rootScope.messageList == null){
        messageService.setMessageCallbacks(function (newMessage) {

            },
            function (newMessage) {

            });
    }

    $scope.$on("$routeChangeSuccess", function () {
        var id = $routeParams["id"];
        if(id!=='undefined'){
            var promiseObj=userService.getUser(id);
            promiseObj.then(function(value) {
                    $scope.user = value;
                    $scope.message.receiverId = value.id;
                    var promiseObj=postService.getPosts(id);
                    promiseObj.then(function(value) {
                            $scope.posts = value;
                        },
                        function (value) {
                            //can be logging
                            console.dir(value);
                        }
                    );
                },
                function (value) {
                    //can be logging
                    console.dir(value);
                }
            );
        }
    });

    $scope.setNewFile = function (file) {
        $scope.file = file;
    };

    $scope.setNewAvatarFile = function (file) {
        $scope.avatarFile = file;
    };

    $scope.addPost = function () {
        var date = new Date();
        var month = date.getMonth() + 1;
        var sendDate = date.getFullYear() + "-" + month + "-" + date.getDate() + " " +
            date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
        var promiseObj=imageUploadService.uploadFile($scope.file, $scope.text, sendDate, $rootScope.userInfo.id);
        promiseObj.then(function(value) {
                $scope.posts.push(value)
            },
            function (value) {
                //can be logging
                console.dir(value);
            }
        );
    };

    $scope.editProfile = function () {
        var promiseObj=imageUploadService.editUserInfo($scope.avatarFile, $scope.name, $scope.surname, $scope.country, $scope.city);
        promiseObj.then(function(value) {
                $rootScope.userInfo = value;
                var promiseObj=userService.getUser($scope.user.id);
                promiseObj.then(function(value) {
                        $scope.user = value;
                    },
                    function (value) {
                        //can be logging
                        console.dir(value);
                    }
                );
            },
            function (value) {
                //can be logging
                console.dir(value);
            }
        );
    };

    $scope.deletePost = function (post) {
        var index = $scope.posts.indexOf(post);
        var promiseObj=postService.deletePost(post.postProjection.id);
        promiseObj.then(function(value) {
                $scope.posts.splice(index, 1);
            },
            function (value) {
                //can be logging
                console.dir(value);
            }
        );
    };

    $scope.sendMessage = function () {
        var date = new Date();
        var month = date.getMonth() + 1;
        $scope.message.sendDate = date.getFullYear() + "-" + month + "-" + date.getDate() + " " +
            date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
        console.dir($scope.message);
        messageService.send($scope.message);
        $scope.message.subject = '';
    }
}]);
/**
 * Created by gs on 22.05.2017.
 */
webApp.factory('imageUploadService',['$q', '$http', 'Upload', function ($q, $http, Upload) {
    return{
        uploadFile: function (file, text, creationDate, userId) {
            var deferred = $q.defer();
            Upload.upload({
                url: '/api/post/save/file',
                fields: {
                    'text': text,
                    'creationDate': creationDate,
                    'userId': userId
                },
                file: file
            }).then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                }
            );

            return deferred.promise;
        },
        editUserInfo: function (file, name, surname, country, city) {
            var deferred = $q.defer();
            Upload.upload({
                url: '/api/user/update',
                fields: {
                    'name': name,
                    'surname': surname,
                    'country': country,
                    'city': city
                },
                file: file
            }).then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                }
            );

            return deferred.promise;
        },
        getPosts: function () {
            var deferred = $q.defer();
            $http({
                method: 'POST',
                url: '/login',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
                },
                data: 'username=' + username + '&password=' + password
            }).
            then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        }
    }
}]);
/**
 * Created by gs on 22.05.2017.
 */
webApp.factory('postService',['$http', '$q', function ($http, $q) {
    return{
        getPosts: function (userId) {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                url: '/api/get/posts',
                params: {userId: userId}
            }).then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        },
        deletePost: function (postId) {
            var deferred = $q.defer();
            $http({
                method: 'POST',
                url: '/api/delete/post/' + postId,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).
            then(function(response) {
                    deferred.resolve(response.headers);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        }
    }
}]);
/**
 * Created by gs on 22.05.2017.
 */
webApp.factory('userService',['$http', '$q', function ($http, $q) {
    return{
        getUser: function (userId) {
            var deferred = $q.defer();
            $http({
                method: 'GET',
                url: '/api//user/' + userId
            }).then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        }
    }
}]);
webApp.controller("loginController", ['$scope', '$location', '$rootScope', 'loginService', function($scope, $location, $rootScope, loginService){
    $scope.loginUser = function () {
        var promiseObj = loginService.doLogin($scope.username, $scope.password);
        promiseObj.then(function(value) {
            var userPromiseObj = loginService.getUser();
            userPromiseObj.then(function (value) {
                $rootScope.userInfo = value;
                $rootScope.loggedInUser = true;
                $location.path('/user/' + $rootScope.userInfo.id);
            },
            function (value) {
                //something wrong server problem
            });
        },
        function (value) {
            $scope.username = "";
            $scope.password = "";
        });
    };
}]);
webApp.factory('loginService',['$http', '$q', function ($http, $q) {
    return{
        doLogin: function (username, password) {
            var deferred = $q.defer();
            $http({
                method: 'POST',
                url: '/login',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
                },
                data: 'username=' + username + '&password=' + password
            }).
            then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        },
        getUser: function () {
            var deferred = $q.defer();
            $http({
                method: 'POST',
                url: '/api/auth',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
                }
            }).
            then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        }
    }
}]);


/**
 * Created by gs on 07.05.2017.
 */
webApp.controller("detailedMessageController",['$scope', '$rootScope', '$routeParams', 'messageService', function ($scope, $rootScope, $routeParams, messageService) {
    $scope.message = {
        'subject' : '',
        'senderId' : $rootScope.userInfo.id,
        'receiverId' : {},
        'sendDate' : ''
    };
    $scope.userId = {};
    $scope.messages = [];

    $scope.$on("$routeChangeSuccess", function () {
        var id = $routeParams["id"];
        if(id!=='undefined'){
            $scope.userId = id;
            $scope.message.receiverId = id;
        }
    });
    
    $scope.sendMessage = function () {
        var date = new Date();
        var month = date.getMonth() + 1;
        $scope.message.sendDate = date.getFullYear() + "-" + month + "-" + date.getDate() + " " +
            date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
        console.dir($scope.message);
        messageService.send($scope.message);
        $scope.message.subject = '';
    }
}]);
/**
 * Created by gs on 07.05.2017.
 */
webApp.controller("mainMessageController",['$scope', '$rootScope', '$location', 'messageService', function ($scope, $rootScope, $location, messageService) {
    $scope.$on("$routeChangeSuccess", function () {
        if ($rootScope.messageList == null){
            messageService.initSocket();
            messageService.setMessageCallbacks(pushNewMessage, handleErrorMessage);
            var promiseObj=messageService.getAllMessagesForUser($rootScope.userInfo.id);
            promiseObj.then(function(value) {
                    $rootScope.messageList = value;
                    console.dir($rootScope.messageList);
                },
                function (value) {
                    //can be logging
                    console.dir(value);
                }
            );
        }
    });

    var pushNewMessage = function (newMessage) {
        var userId = newMessage.receiverId == $rootScope.userInfo.id ? newMessage.senderId : newMessage.receiverId;
        $rootScope.messageList[userId].messageList.push(newMessage);
    };

    var handleErrorMessage = function (newMessage) {
        console.dir(newMessage);
    };

    $scope.viewDetailedMessage = function (lastMessage) {
        var userId = lastMessage.receiverId == $rootScope.userInfo.id ? lastMessage.senderId : lastMessage.receiverId;
        $location.path("messages/" + userId);
    }
}]);
/**
 * Created by gs on 22.05.2017.
 */
webApp.filter('messageSearch', function() {
    return function(input, search) {
        if (!input) return input;
        if (!search) return input;
        var expected = ('' + search).toLowerCase();
        var result = {};
        angular.forEach(input, function(value, key) {
            var actual = ('' + value.simpleUser.fullName).toLowerCase();
            if (actual.indexOf(expected) !== -1) {
                result[key] = value;
            }
        });
        return result;
    }
});
/**
 * Created by gs on 07.05.2017.
 */
webApp.factory('messageService',['$http', '$q', function ($http, $q) {
    var socket = null;
    var messageSuccessCallback;
    var messageErrorCallback;

    function showMessage(message) {
        var newMessage = JSON.parse(message);
        if (newMessage.id != -1){
            messageSuccessCallback(newMessage);
        }
        else {
            messageErrorCallback(newMessage);
        }
    }

    return{
        initSocket: function () {
            if (socket == null){
                socket = new WebSocket("ws://localhost:8080/message");

                socket.onmessage = function(event) {
                    var incomingMessage = event.data;
                    showMessage(incomingMessage);
                };
            }
        },
        setMessageCallbacks: function (successCallback, errorCallback) {
            messageSuccessCallback = successCallback;
            messageErrorCallback = errorCallback;
        },
        send: function (message) {
            var outMessage = JSON.stringify(message);
            socket.send(outMessage);
        },
        getAllMessagesForUser: function (userId) {
            var deferred = $q.defer();
            $http({
                method: 'GET', 
                url: '/api/get/messages',
                params: {userId: userId}
            }).then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        }
    }
}]);
webApp.controller("musicController",['$scope', function ($scope) {

}]);


/**
 * Created by gs on 29.04.2017.
 */
webApp.factory('musicLoadService',['$q', '$http', 'Upload', function ($q, $http, Upload) {
    return{
        uploadFile: function (file, fileName) {
            var deferred = $q.defer();
            Upload.upload({
                url: '/api/upload/music',
                fields: {'fileName': fileName},
                file: file
            }).then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                }
            );

            return deferred.promise;
        },
        getSounds: function () {
            var deferred = $q.defer();
            $http({method: 'GET', url: '/api/get/sounds', params: {noCache: (new Date().getTime()) + Math.random()}}).
            then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.status);
                });

            return deferred.promise;
        }
    }
}]);
/**
 * Created by gs on 29.04.2017.
 */
webApp.directive('musicPlayer', function($rootScope, ngAudio, musicLoadService) {
    return {
        restrict: 'AEC',
        replace: true,
        templateUrl: 'views/components/music/playerTemplate.html',
        link: function(scope, elem, attrs) {
            if ($rootScope.sounds == null){
                var promiseObj = musicLoadService.getSounds();
                promiseObj.then(function(value) {
                        $rootScope.sounds = value;
                        $rootScope.currentMusic = $rootScope.sounds[0];
                        $rootScope.currentMusicIndex = 0;

                        for (var i = 0; i < $rootScope.sounds.length; i++){
                            $rootScope.sounds[i].playing = false;
                            $rootScope.sounds[i].loaded = false;
                            $rootScope.sounds[i].sound = {};
                        }
                    },
                    function (value) {

                    }
                );
            }

            scope.file = {};

            var endedCallback = function () {
                scope.playNext();
            };

            scope.playSound = function (music, index) {
                if (music.loaded == false){
                    music.sound = ngAudio.load(music.path);
                    music.sound.setEndedCallback(endedCallback);
                    music.loaded = true;
                }

                if ($rootScope.currentMusic != music){
                    $rootScope.currentMusicIndex = index;
                    if ($rootScope.currentMusic.loaded){
                        $rootScope.currentMusic.sound.stop();
                        $rootScope.currentMusic.playing = false;
                    }

                    $rootScope.currentMusic = music;
                }

                if (!music.playing){
                    music.sound.play();
                }
                else {
                    music.sound.pause();
                }

                music.playing = !music.playing;
            };

            scope.muteVolume = function (music) {
                music.sound.muting = !music.sound.muting;
            };

            scope.changeVolume = function (music) {
                if (music.sound.muting){
                    music.sound.muting = false;
                }
            };

            scope.playNext = function () {
                scope.playSound($rootScope.sounds[($rootScope.currentMusicIndex + 1) % $rootScope.sounds.length], ($rootScope.currentMusicIndex + 1) % $rootScope.sounds.length) ;
            };

            scope.playPrev = function () {
                if ($rootScope.currentMusicIndex > 0){
                    scope.playSound($rootScope.sounds[($rootScope.currentMusicIndex - 1) % $rootScope.sounds.length], ($rootScope.currentMusicIndex - 1) % $rootScope.sounds.length) ;
                }
            };

            scope.repeatMusic = function (music) {
                if (music.sound.loop === true){
                    music.sound.loop = 0;
                }
                else {
                    music.sound.loop = true;
                }
            };

            scope.showMusicUpload = function () {
                commonModule.showMusicLoadModal();
            };

            scope.setNewFile = function (newFile) {
                scope.file = newFile;
            };

            scope.uploadMusic = function () {
                var promiseObj = musicLoadService.uploadFile(scope.file, scope.fileName);
                promiseObj.then(function(value) {
                        var newSound = value;
                        newSound.playing = false;
                        newSound.loaded = false;
                        newSound.sound = {};
                        $rootScope.sounds.push(newSound);
                    },
                    function (value) {

                    }
                );
            }
        }
    };
});
/**
 * Created by gs on 06.05.2017.
 */
webApp.directive('shortMusicPlayer', function($rootScope, ngAudio) {
    return {
        restrict: 'AEC',
        replace: true,
        templateUrl: 'views/components/music/shortPlayerTemplate.html',
        link: function(scope, elem, attrs) {
            var endedCallback = function () {
                scope.playNext();
            };

            scope.playSound = function (music, index) {
                if (music.loaded == false){
                    music.sound = ngAudio.load(music.path);
                    music.sound.setEndedCallback(endedCallback);
                    music.loaded = true;
                }

                if ($rootScope.currentMusic != music){
                    $rootScope.currentMusicIndex = index;
                    if ($rootScope.currentMusic.loaded){
                        $rootScope.currentMusic.sound.stop();
                        $rootScope.currentMusic.playing = false;
                    }

                    $rootScope.currentMusic = music;
                }

                if (!music.playing){
                    music.sound.play();
                }
                else {
                    music.sound.pause();
                }

                music.playing = !music.playing;
            };

            scope.playNext = function () {
                scope.playSound($rootScope.sounds[($rootScope.currentMusicIndex + 1) % $rootScope.sounds.length], ($rootScope.currentMusicIndex + 1) % $rootScope.sounds.length) ;
            };

            scope.playPrev = function () {
                if ($rootScope.currentMusicIndex > 0){
                    scope.playSound($rootScope.sounds[($rootScope.currentMusicIndex - 1) % $rootScope.sounds.length], ($rootScope.currentMusicIndex - 1) % $rootScope.sounds.length) ;
                }
            };
        }
    };
});
webApp.controller('registryController', ['$scope', '$rootScope', '$location', 'registerService', control]);

function control($scope, $rootScope, $location, registerService) {
    $scope.register = function () {
        var user = registerService.createRegisterInf($scope);
        var promiseObj=registerService.doRegister(user);
        promiseObj.then(function(value) {
                $rootScope.loggedInUser = true;
                $rootScope.userInfo = value;
                $location.path("/");
            },
            function (value) {
                registerService.performScope($scope, value);
        });
    };
}
webApp.factory('registerService',['$http', '$q', '$filter', register]);

function register($http, $q, $filter) {
    return{
        doRegister: function (regInf) {
            var deferred = $q.defer();
            $http({
                method: 'POST',
                url: '/api/user',
                headers: {
                    'Content-Type': 'application/json'
                },
                data: regInf
            }).
            then(function(response) {
                    deferred.resolve(response.data);
                },
                function(response) {
                    deferred.reject(response.data);
                });

            return deferred.promise;
        },
        createRegisterInf: function ($scope) {
            var regInf = {};
            regInf.password = $scope.password;
            regInf.firstName = $scope.name;
            regInf.lastName = $scope.surname;
            regInf.email = $scope.email;
            regInf.country = $scope.country;
            regInf.city = $scope.city;
            regInf.birthday = $filter('date')($scope.birthday, "yyyy-MM-dd");

            return regInf;
        },
        performScope: function ($scope, value) {
            $scope.password = "";
            $scope.repeatPassword = "";
            $scope.name = value.firstName;
            $scope.surname = value.lastName;
            $scope.email = value.email;
            $scope.country = value.country;
            $scope.city = value.city;
        }
    }
}
webApp.directive('langSelector', function($translate) {
    return {
        restrict: 'C',
        replace: true,
        templateUrl: 'views/shared/lang/lang-selector.html',
        link: function(scope, elem, attrs) {
            scope.setLocale = function(locale) {
                $translate.use(locale);
            };
        }
    };
});
/**
 * Created by gs on 07.05.2017.
 */
webApp.controller("menuController",['$scope', function ($scope) {
    $scope.showMusic = false;
    $scope.changeShow = function () {
        if ($scope.showMusic){
            commonModule.hideMusicDropdown();
        }
        else {
            commonModule.showMusicDropdown();
        }

        $scope.showMusic = !$scope.showMusic;
    }
}]);